var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/S24-CSC4780/docs/prologue/schedule/",title:"Schedule",description:`This is a tentative schedule and will change.
Grading details #Assessment Type Weightage Additional Information Exams (3 exams) 50% Programming Assignments 40% One late submission allowed. 50% deducted for other late submissions. Class Participation 10% Class Schedule #Jan 11, 2024 #Introduction - Overview of course Jan 23-25, 2024 #Reading assignment: The Growth of Cryptography Basic principles of security Slides The Growth of Cryptography - Historical perspective, modern developments Slides Feb 1, 2024 #Reading assignment: Cryptographic Foundations Modular Arithmetic and One-Time Pad (OTP) Basics - Encryption fundamentals Slides Feb 6, 2024 #Reading assignment: Hash Functions Hash Functions, Merkel Tree- Introduction to hash functions Slides Feb 15, 2024 #Reading assignment: Symmetric Encryption Encryption (DES) Slides Feb 20, 2024 #Reading assignment: Asymetric Encryption Encryption (AES) Slides Feb 22, 2024 #Reading assignment: Asymetric Encryption Encryption (AES) Slides Feb 27, 2024 #Midterm review Feb 29, 2024 #Midterm Mar 05, 2024 #Reading assignment: PKI Public Key Cryptography Slides Mar 07, 2024 #Reading assignment - Digital Signature Digital Signatures Slides Mar 19, 2024 #Reading assignment: Project Mar 21, 2024 #Reading assignment: Securing data in motion TLS/SSL Slides Mar 26, 2024 #Project Discussion Apr 2, 2024 #Reading assignment: IP Security IP Security Slides Apr 4, 2024 #Exam2 Apr 9, 2024 #Reading assignment: Endpoint Security Network Endpoint Security, Malware Slides Apr 11, 2024 #Reading assignment: Malware and Malware Analysis Zero Trust Security Slides Apr 16, 2024 #Reading assignment: Cyber-Threat Intelligence Cyber Threat Intelligence Slides Apr 18, 2024 #Reading assignment: Quantum Security project Apr 23, 2024 #Reading assignment: Additional Topic 11 Quantum Security Slides Apr 25, 2024 #Reading assignment: Additional Topic 12 Additional Topic 12 Slides Final #TBD Other topics - as time permits #`,content:`This is a tentative schedule and will change.
Grading details #Assessment Type Weightage Additional Information Exams (3 exams) 50% Programming Assignments 40% One late submission allowed. 50% deducted for other late submissions. Class Participation 10% Class Schedule #Jan 11, 2024 #Introduction - Overview of course Jan 23-25, 2024 #Reading assignment: The Growth of Cryptography Basic principles of security Slides The Growth of Cryptography - Historical perspective, modern developments Slides Feb 1, 2024 #Reading assignment: Cryptographic Foundations Modular Arithmetic and One-Time Pad (OTP) Basics - Encryption fundamentals Slides Feb 6, 2024 #Reading assignment: Hash Functions Hash Functions, Merkel Tree- Introduction to hash functions Slides Feb 15, 2024 #Reading assignment: Symmetric Encryption Encryption (DES) Slides Feb 20, 2024 #Reading assignment: Asymetric Encryption Encryption (AES) Slides Feb 22, 2024 #Reading assignment: Asymetric Encryption Encryption (AES) Slides Feb 27, 2024 #Midterm review Feb 29, 2024 #Midterm Mar 05, 2024 #Reading assignment: PKI Public Key Cryptography Slides Mar 07, 2024 #Reading assignment - Digital Signature Digital Signatures Slides Mar 19, 2024 #Reading assignment: Project Mar 21, 2024 #Reading assignment: Securing data in motion TLS/SSL Slides Mar 26, 2024 #Project Discussion Apr 2, 2024 #Reading assignment: IP Security IP Security Slides Apr 4, 2024 #Exam2 Apr 9, 2024 #Reading assignment: Endpoint Security Network Endpoint Security, Malware Slides Apr 11, 2024 #Reading assignment: Malware and Malware Analysis Zero Trust Security Slides Apr 16, 2024 #Reading assignment: Cyber-Threat Intelligence Cyber Threat Intelligence Slides Apr 18, 2024 #Reading assignment: Quantum Security project Apr 23, 2024 #Reading assignment: Additional Topic 11 Quantum Security Slides Apr 25, 2024 #Reading assignment: Additional Topic 12 Additional Topic 12 Slides Final #TBD Other topics - as time permits #`}),e.add({id:1,href:"/S24-CSC4780/docs/prologue/programming-assignment/",title:"Streaming Client Server with ABE",description:"Streaming Client Server with ABE.",content:`Streaming Client-Server with Attribute-Based Encryption (ABE) Assignment #Objective #The primary objective of this assignment is to build a streaming client-server application that employs Attribute-Based Encryption (ABE) for securing key frames. Students are required to implement the client and server, stream media between them, identify key frames to be encrypted, and perform encryption and decryption using ABE. Additionally, the quality of experience (QoE) must be quantified through metrics such as jitter and delay.
Prerequisites #Familiarity with Python or a comparable programming language Basic understanding of client-server architecture Knowledge of video streaming and basic cryptography Experience working with encryption libraries Tasks #Part 1: Setup #Install ABE Libraries: Install the required Attribute-Based Encryption (ABE) libraries on both client and server systems. Install Streaming Software: Install or implement streaming software capable of serving as a client and server. Part 2: Basic Streaming #Stream Video: Stream a video file from the server to the client. You may use any readily available video for this task. Identify Key Frames: Write a program that identifies key frames from the video stream. Part 3: Encryption and Decryption #Encrypt Key Frames: Use the ABE algorithm to encrypt the identified key frames. Stream Encrypted Video: Stream the video with encrypted key frames from the server to the client. Decrypt and Render: Implement logic on the client to decrypt the key frames and render the video stream. Part 4: Quality Metrics #Measure Jitter: Implement a function to measure and log the jitter experienced during the streaming process. Measure Delay: Implement a function to measure and log the delay in the video stream. Quantify QoE: Utilizing the jitter and delay metrics, quantify the Quality of Experience (QoE). Evaluation Criteria #Functional completeness of the client-server streaming system Successful encryption and decryption using ABE Accuracy and completeness in measuring jitter, delay, and QoE Code readability, organization, and documentation Submission Guidelines #Submit your source code files, scripts, and any supplementary documents in a zipped folder. Include a README.md file that explains how to compile and run your programs, along with any necessary setup instructions. Deadline: April 15th, 2023 References #ABE Library Documentation: https://acsc.cs.utexas.edu/cpabe/ Video Streaming Protocols and Tools: TBD Quality of Experience (QoE) Metrics: TBD Project Schedule: ABE Streaming System #Combined Sprint 1 \u0026amp; 2: Project Setup and Basic Streaming #Duration: February 20th - February 26th #Install ABE Libraries: Install the required ABE libraries on both client and server systems. Install Streaming Software: Set up streaming software for client and server. Stream Video: Stream a test video from the server to the client. Identify Key Frames: Develop a program to identify key frames in the video stream. Sprint 3: Encryption Implementation #Duration: February 27th - March 5th #Encrypt Key Frames: Use ABE algorithm to encrypt key frames. Stream Encrypted Video: Stream the video with encrypted key frames from the server to the client. Sprint 4: Decryption and Rendering #Duration: March 6th - March 12th #Decrypt Key Frames: Implement decryption logic on the client. Render Video Stream: Render the decrypted video stream on the client. Sprint 5: Quality Metrics Implementation #Duration: March 13th - March 19th #Measure Jitter: Implement a function to measure and log jitter. Measure Delay: Implement a function to measure and log delay. Sprint 6: Quality of Experience (QoE) Assessment #Duration: March 20th - March 26th #Quantify QoE: Use jitter and delay metrics to quantify the Quality of Experience. Sprint 7: Final Adjustments and Documentation #Duration: March 27th - April 2nd #Final Adjustments: Make any necessary adjustments based on QoE feedback. Documentation: Complete all project documentation. Sprint 8: Project Review and Closure #Duration: April 3rd - April 9th #Project Review: Conduct a final review of the project. Project Closure: Prepare for handover or deployment. `}),e.add({id:2,href:"/S24-CSC4780/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:3,href:"/S24-CSC4780/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()